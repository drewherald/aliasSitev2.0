{
  "version": 3,
  "sources": ["../../react-ui-scrollspy/src/utils/throttle.ts", "../../react-ui-scrollspy/src/ScrollSpy/ScrollSpy.tsx"],
  "sourcesContent": ["export const throttle = (callback: () => void, limit: number) => {\n  var tick = false;\n\n  return () => {\n    if (!tick) {\n      callback();\n      tick = true;\n      setTimeout(function () {\n        tick = false;\n      }, limit);\n    }\n  };\n};\n", "import * as React from \"react\";\nimport {\n  MutableRefObject,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { throttle } from \"../utils/throttle\";\n\ninterface ScrollSpyProps {\n  children: ReactNode;\n\n  // refs\n  navContainerRef?: MutableRefObject<HTMLDivElement | null>;\n  parentScrollContainerRef?: MutableRefObject<HTMLDivElement | null>;\n\n  // throttle\n  scrollThrottle?: number;\n\n  // callback\n  onUpdateCallback?: (id: string) => void;\n\n  // offsets\n  offsetTop?: number;\n  offsetBottom?: number;\n\n  // customize attributes\n  useDataAttribute?: string;\n  activeClass?: string;\n\n  useBoxMethod?: boolean;\n  updateHistoryStack?: boolean;\n}\n\nconst ScrollSpy = ({\n  children,\n\n  // refs\n  navContainerRef,\n  parentScrollContainerRef,\n\n  // throttle\n  scrollThrottle = 300,\n\n  // callback\n  onUpdateCallback,\n\n  // offsets\n  offsetTop = 0,\n  offsetBottom = 0,\n\n  // customize attributes\n  useDataAttribute = \"to-scrollspy-id\",\n  activeClass = \"active-scroll-spy\",\n\n  useBoxMethod = true,\n  updateHistoryStack = true,\n}: ScrollSpyProps) => {\n  const scrollContainerRef = useRef<HTMLDivElement | null>(null);\n  const [navContainerItems, setNavContainerItems] = useState<NodeListOf<Element> | undefined>(); // prettier-ignore\n\n  // keeps track of the Id in navcontainer which is active\n  // so as to not update classLists unless it has been updated\n  const prevIdTracker = useRef(\"\");\n\n  // To get the nav container items depending on whether the parent ref for the nav container is passed or not\n  useEffect(() => {\n    navContainerRef\n      ? setNavContainerItems(\n          navContainerRef.current?.querySelectorAll(\n            `[data-${useDataAttribute}]`\n          )\n        )\n      : setNavContainerItems(\n          document.querySelectorAll(`[data-${useDataAttribute}]`)\n        );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [navContainerRef]);\n\n  // fire once after nav container items are set\n  useEffect(() => {\n    checkAndUpdateActiveScrollSpy();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [navContainerItems]);\n\n  const isVisible = (el: HTMLElement) => {\n    const rectInView = el.getBoundingClientRect();\n\n    if (useBoxMethod) {\n      const useHeight = parentScrollContainerRef?.current\n        ? parentScrollContainerRef?.current.offsetHeight\n        : window.innerHeight;\n      const hitbox_top = useHeight;\n      const element_top = rectInView.top;\n      const element_bottom = rectInView.top + useHeight;\n\n      return (\n        hitbox_top < element_bottom + offsetBottom &&\n        hitbox_top > element_top - offsetTop\n      );\n    } else {\n      // this decides how much of the element should be visible\n      const leniency = parentScrollContainerRef?.current\n        ? parentScrollContainerRef?.current.offsetHeight * 0.5\n        : window.innerHeight * 0.5;\n\n      const useHeight = parentScrollContainerRef?.current\n        ? parentScrollContainerRef?.current.offsetHeight\n        : window.innerHeight;\n\n      return (\n        rectInView.top + leniency + offsetTop >= 0 &&\n        rectInView.bottom - leniency - offsetBottom <= useHeight\n      );\n    }\n  };\n\n  const checkAndUpdateActiveScrollSpy = () => {\n    const scrollParentContainer = scrollContainerRef.current;\n\n    // if there are no children, return\n    if (!(scrollParentContainer && navContainerItems)) return;\n\n    // loop over all children in scroll container\n    for (let i = 0; i < scrollParentContainer.children.length; i++) {\n      // get child element\n      const useChild = scrollParentContainer.children.item(i) as HTMLDivElement;\n\n      const elementIsVisible = isVisible(useChild);\n\n      // check if the element is in the viewport\n      if (elementIsVisible) {\n        // if so, get its ID\n        const changeHighlightedItemId = useChild.id;\n\n        // if the element was same as the one currently active ignore it\n        if (prevIdTracker.current === changeHighlightedItemId) return;\n\n        // now loop over each element in the nav Container\n        navContainerItems.forEach((el) => {\n          const attrId = el.getAttribute(`data-${useDataAttribute}`);\n\n          // if the element contains 'active' the class remove it\n          if (el.classList.contains(activeClass)) {\n            el.classList.remove(activeClass);\n          }\n\n          // check if its ID matches the ID we got from the viewport\n          // also make sure it does not already contain the 'active' class\n          if (\n            attrId === changeHighlightedItemId &&\n            !el.classList.contains(activeClass)\n          ) {\n            el.classList.add(activeClass);\n\n            if (onUpdateCallback) {\n              onUpdateCallback(changeHighlightedItemId);\n            }\n\n            prevIdTracker.current = changeHighlightedItemId;\n            if (updateHistoryStack) {\n              window.history.replaceState(\n                {},\n                \"\",\n                `#${changeHighlightedItemId}`\n              );\n            }\n          }\n        });\n        break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    // listen for scroll event\n    parentScrollContainerRef\n      ? // if ref for scrollable div is provided\n        parentScrollContainerRef.current?.addEventListener(\n          \"scroll\",\n          throttle(checkAndUpdateActiveScrollSpy, scrollThrottle)\n        )\n      : // else listen for scroll in window\n        window.addEventListener(\n          \"scroll\",\n          throttle(checkAndUpdateActiveScrollSpy, scrollThrottle)\n        );\n  });\n\n  return <div ref={scrollContainerRef}>{children}</div>;\n};\n\nexport default ScrollSpy;\n"],
  "mappings": "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",
  "names": ["useRef", "useState", "useEffect", "_a", "i", "React"]
}
