import {
  require_react
} from "./chunk-LOJMOVJP.js";
import {
  __commonJS
} from "./chunk-Y2F7D3TJ.js";

// node_modules/react-ui-scrollspy/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-ui-scrollspy/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var React = require_react();
    function _interopNamespace(e) {
      if (e && e.__esModule)
        return e;
      var n = /* @__PURE__ */ Object.create(null);
      if (e) {
        Object.keys(e).forEach(function(k) {
          if (k !== "default") {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: function() {
                return e[k];
              }
            });
          }
        });
      }
      n["default"] = e;
      return Object.freeze(n);
    }
    var React__namespace = _interopNamespace(React);
    var throttle = function(callback, limit) {
      var tick = false;
      return function() {
        if (!tick) {
          callback();
          tick = true;
          setTimeout(function() {
            tick = false;
          }, limit);
        }
      };
    };
    var ScrollSpy = function(_a) {
      var children = _a.children, navContainerRef = _a.navContainerRef, parentScrollContainerRef = _a.parentScrollContainerRef, _b = _a.scrollThrottle, scrollThrottle = _b === void 0 ? 300 : _b, onUpdateCallback = _a.onUpdateCallback, _c = _a.offsetTop, offsetTop = _c === void 0 ? 0 : _c, _d = _a.offsetBottom, offsetBottom = _d === void 0 ? 0 : _d, _e = _a.useDataAttribute, useDataAttribute = _e === void 0 ? "to-scrollspy-id" : _e, _f = _a.activeClass, activeClass = _f === void 0 ? "active-scroll-spy" : _f, _g = _a.useBoxMethod, useBoxMethod = _g === void 0 ? true : _g, _h = _a.updateHistoryStack, updateHistoryStack = _h === void 0 ? true : _h;
      var scrollContainerRef = React.useRef(null);
      var _j = React.useState(), navContainerItems = _j[0], setNavContainerItems = _j[1];
      var prevIdTracker = React.useRef("");
      React.useEffect(function() {
        var _a2;
        navContainerRef ? setNavContainerItems((_a2 = navContainerRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelectorAll("[data-".concat(useDataAttribute, "]"))) : setNavContainerItems(document.querySelectorAll("[data-".concat(useDataAttribute, "]")));
      }, [navContainerRef]);
      React.useEffect(function() {
        checkAndUpdateActiveScrollSpy();
      }, [navContainerItems]);
      var isVisible = function(el) {
        var rectInView = el.getBoundingClientRect();
        if (useBoxMethod) {
          var useHeight = (parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current) ? parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current.offsetHeight : window.innerHeight;
          var hitbox_top = useHeight;
          var element_top = rectInView.top;
          var element_bottom = rectInView.top + useHeight;
          return hitbox_top < element_bottom + offsetBottom && hitbox_top > element_top - offsetTop;
        } else {
          var leniency = (parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current) ? (parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current.offsetHeight) * 0.5 : window.innerHeight * 0.5;
          var useHeight = (parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current) ? parentScrollContainerRef === null || parentScrollContainerRef === void 0 ? void 0 : parentScrollContainerRef.current.offsetHeight : window.innerHeight;
          return rectInView.top + leniency + offsetTop >= 0 && rectInView.bottom - leniency - offsetBottom <= useHeight;
        }
      };
      var checkAndUpdateActiveScrollSpy = function() {
        var scrollParentContainer = scrollContainerRef.current;
        if (!(scrollParentContainer && navContainerItems))
          return;
        var _loop_1 = function(i2) {
          var useChild = scrollParentContainer.children.item(i2);
          var elementIsVisible = isVisible(useChild);
          if (elementIsVisible) {
            var changeHighlightedItemId_1 = useChild.id;
            if (prevIdTracker.current === changeHighlightedItemId_1)
              return { value: void 0 };
            navContainerItems.forEach(function(el) {
              var attrId = el.getAttribute("data-".concat(useDataAttribute));
              if (el.classList.contains(activeClass)) {
                el.classList.remove(activeClass);
              }
              if (attrId === changeHighlightedItemId_1 && !el.classList.contains(activeClass)) {
                el.classList.add(activeClass);
                if (onUpdateCallback) {
                  onUpdateCallback(changeHighlightedItemId_1);
                }
                prevIdTracker.current = changeHighlightedItemId_1;
                if (updateHistoryStack) {
                  window.history.replaceState({}, "", "#".concat(changeHighlightedItemId_1));
                }
              }
            });
            return "break";
          }
        };
        for (var i = 0; i < scrollParentContainer.children.length; i++) {
          var state_1 = _loop_1(i);
          if (typeof state_1 === "object")
            return state_1.value;
          if (state_1 === "break")
            break;
        }
      };
      React.useEffect(function() {
        var _a2;
        parentScrollContainerRef ? (
          // if ref for scrollable div is provided
          (_a2 = parentScrollContainerRef.current) === null || _a2 === void 0 ? void 0 : _a2.addEventListener("scroll", throttle(checkAndUpdateActiveScrollSpy, scrollThrottle))
        ) : (
          // else listen for scroll in window
          window.addEventListener("scroll", throttle(checkAndUpdateActiveScrollSpy, scrollThrottle))
        );
      });
      return React__namespace.createElement("div", { ref: scrollContainerRef }, children);
    };
    exports["default"] = ScrollSpy;
  }
});
export default require_dist();
//# sourceMappingURL=react-ui-scrollspy.js.map
